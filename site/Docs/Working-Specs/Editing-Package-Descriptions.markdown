# Enabling Editing Package Descriptions #

Foreword: Today, NuGet packages cannot be edited or replaced once published on nuget.org. However we know that this policy doesn’t satisfy package authors who wish to keep their package description up to date, fix typos, add new package logos, and so on. Therefore we’re trying to relax the policy a little and allow authors to make description-only edits to their packages. 

Most of the public discussion around this feature so far has occurred here:

[https://github.com/NuGet/NuGetGallery/issues/807](https://github.com/NuGet/NuGetGallery/issues/807)

This document is a design for the feature, and acts as the latest response to that discussion of how we can implement description-only editing of packages that have been uploaded to nuget.org. This design is being publicized here today so that there is a chance for community feedback before we finish and ship the feature. Here follows the actual design.

**What will be editable?**

A package’s

 - Title
 - Description
 - Summary
 - Authors
 - Copyright 
 - Release Notes
 - Project URL 
 - Icon URL
 - Tags
 - ‘Listed’ or ‘Unlisted’ state

**What will not be editable?**

A package’s

 - ID
 - Version
 - License URL
 - ‘Require License Acceptance’ flag
 - Contents (files)
 - Dependencies
 - References
 - Framework Assemblies
 - Owners*

*Owners can be changed using the existing ‘Manage Owners’ functionality on nuget.org. The `<owners>` section of the nuspec file is ignored when using nuget.org.

**How will the editing happen?**

In order to limit what edits can happen to ones which will not introduce breaking changes to package consumers, the way editing will work is that you will need to log in to the nuget.org website to perform edits. Once you are logged on as the package owner, a link to ‘Edit Package’ will appear on your package’s page. [Actually there is an Edit Package page already - it’s just not useful for editing the package!] 

On the edit package page you will be able to choose which version of your package to edit.  It will be really easy to edit the latest version of your package. The latest version of the package is very special because that version is the one whose description, summary, title, and icon URL are used by default in package search results and on your package’s main page. After you edit your package, you will click ‘Save’, and the server will perform the edits.

When a package description is edited, a new nupkg file will be generated by the nuget.org servers. The new nupkg file will contain the exact same old contents as the original package, but modified to contain the new description in the .nuspec file. The original nupkg file which the package author uploaded will be retained as a backup by the server.

Nuget.org will track the different edited versions of the package internally as something like
‘MyPackage, v1.0.0’ (original),
‘MyPackage, v1.0.0, Edit #1’, 
‘MyPackage, v1.0.0, Edit #2’

**How will people see the changes to package metadata?**

The updated package description will be visible in several ways:
1)	Browsing nuget.org - nuget.org will always show you the latest edit of the package description
2)	Searching for Online nuget packages using the package manager – again, you will always see the latest edit of the package description
3)	Actually installing, or reinstalling a package – any time the client doesn’t already have the package installed, the newest version of the package will be retrieved from nuget.org
4)	Updating an already installed package to a newer version (not just a newer description edit, but an actual version number increment of the package). 
The fact that an edit has occurred, however, is mostly invisible.

**When I do Update All packages, will ‘edits’ of a package get shown as updates to the installed package?**

No, because the package version number does not get changed by the edit.
Updated package descriptions will not be visible for already installed packages when e.g. using the ‘Installed Packages’ view, or opening the nupkg file to view its contents.

**Will package owners be able to see the ‘edit history’ of their package?**

Yes. Nuget.org will maintain a history all edits of a particular package version. Only the latest edit of a package version will be ‘current’ and therefore visible on the website to other users. But as package owner you will be able to look at any of the old ‘edits’ of your packages, or the original description that you uploaded. (And so will Gallery administrators.)

**Will the entire edit history be visible to everyone (like wiki page histories)?**

The current plan is no, on the assumption that it’s not always useful, and may cause confusion.

**Will my packages.config or my packages folder show the Edit number anywhere?**

No. For one, it would be hard to fix old NuGet clients to be edit number aware. Especially, we don’t want the edit # to be added part of the protocol between client and server. We are trying to scope this to be a Gallery-only change.

The NuGet client will continue to send a request like ‘Get MyPackage, Version 1.0’. The NuGet service then redirects the client to download the .nupkg file which corresponds to the current latest edit.

**Will changing package ownership be a metadata edit?**

No. As per now, you can change a package’s owner on nuget.org at any time. However, edits to package ownership will still not be reflected in downloaded .nupkg files. This may be a controversial decision, in fact, there’s already a bug filed for this, but I don’t know if it will ever get fixed, and an attempt to fix it is, for now, being scoped out of this design. (If you think this really needs fixing let us know more about why you think it’s important.)

**Are there any future possible features which affected how we want to design editable metadata?**

Yes.

 - 	We have an idea that we could make package dependency specifications editable in the future. In this case it might be important for these dependency specification updates to appear to be package updates. We might choose to implement that in a different way than incrementing build numbers however, like implementing the minor version number of the package, and in fact creating a new version. 
 -
 - We would like to support author-signed packages in the future. Packages with edited metadata generated are obviously not going to be author-signed, if they are generated by nuget.org. We therefore might need to allow a second way of editing package metadata where you download the .nupkg, make edits to the .nuspec locally, and re-upload the modified nupkg, to support author-signed package edits. We would rather give you a nice experience for editing your package on the web first though, since a) we can, and b) we don’t have the signing feature yet!

**Technically: what does the HTTP conversation look like when an Edited nupkg is downloaded?**
<pre>
GET package1/version1.0
302 REDIRECT package1.version1.0+build1.nupkg
200 OK Content-disposition: package1.version1.0.nupkg
</pre>

Astute readers will notice that an appropriately written client app might detect what edit # is being downloaded, and in fact by URL hacking (or just remembering what URL it got redirected to last time) download older versions of the package (which are being kept around, just in case). Such URL hacking is considered undocumented and unsupported.

The standard NuGet client however is not actually aware of the redirect URL (it shouldn’t care where it is redirected to), so it does not notice that it is downloading an edited package.
